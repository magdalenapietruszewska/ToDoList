{"version":3,"sources":["serviceWorker.js","ToDo/js/Operation.js","ToDo/js/Task.js","ToDo/js/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Operations","description","addTimeSpent","lastTimeSpent","status","useState","timeSpent","setTimeSpent","startTimer","setStartTimer","stopTimer","setStopTimer","addTime","setAddTime","addFinish","setAddFinish","useEffect","interval","setInterval","prev","clearInterval","className","onClick","onSubmit","e","preventDefault","saveTime","type","name","placeholder","onChange","target","value","Task","id","title","taskDescription","prevOperations","prevStatus","allTasks","setDescription","operations","setStatus","API_URL","data","fetch","method","body","JSON","stringify","headers","then","response","json","tasks","console","log","catch","error","href","finish","addOperation","undefined","map","el","i","Operation","key","ToDo","setTasks","setAllTasks","handleChange","prevState","getAllTasks","tasksFromDB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.65bae2d0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from \"react\";\n\nconst Operations = ({ description, addTimeSpent, lastTimeSpent, status }) => {\n  const [timeSpent, setTimeSpent] = useState(lastTimeSpent);\n  const [startTimer, setStartTimer] = useState(false);\n  const [stopTimer, setStopTimer] = useState(false);\n  const [addTime, setAddTime] = useState(false);\n  const [addFinish, setAddFinish] = useState(false);\n\n  const showtimer = () => {\n    setStartTimer(true);\n  };\n\n  const stop = () => {\n    setStopTimer(true);\n    setAddFinish(true);\n    addTimeSpent(timeSpent, description);\n  };\n  const addtime = () => {\n    setAddTime(true);\n  };\n  const saveTime = (e) => {\n    e.preventDefault();\n    setAddFinish(true);\n    setStopTimer(true);\n    addTimeSpent(timeSpent, description);\n  };\n\n  useEffect(() => {\n    if (startTimer === true) {\n      const interval = setInterval(() => {\n        setTimeSpent((prev) => prev + 1);\n      }, 1000);\n\n      if (stopTimer === true) {\n        clearInterval(interval);\n      }\n\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [startTimer, stopTimer]);\n\n  return (\n    <>\n      <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n        {description}\n        {startTimer === false && addTime === false && status === \"open\" && (\n          <div>\n            <button className=\"btn btn-primary\" onClick={addtime}>\n              Add time manually\n            </button>\n\n            <button className=\"btn btn-primary ml-3\" onClick={showtimer}>\n              Start timer\n            </button>\n          </div>\n        )}\n\n        {startTimer === true && addFinish === false && status === \"open\" && (\n          <div>\n            <span className=\"btn btn-warning\">Czas: {timeSpent}</span>\n            <button className=\"btn btn-primary ml-3\" onClick={stop}>\n              Stop timer\n            </button>\n          </div>\n        )}\n\n        {addTime === true && addFinish === false && status === \"open\" && (\n          <form className=\"d-flex\" onSubmit={(e) => saveTime(e)}>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"time\"\n              placeholder=\"Type in spend time\"\n              onChange={(e) => setTimeSpent(e.target.value)}\n            />\n            <button className=\"btn btn-primary ml-3\">Save</button>\n          </form>\n        )}\n        {addFinish === true && (\n          <span className=\"badge badge-primary badge-pill\">\n            Czas: {timeSpent}\n          </span>\n        )}\n      </li>\n    </>\n  );\n};\n\nexport default Operations;\n","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Operations from \"./Operation\";\n\nconst Task = ({\n  id,\n  title,\n  taskDescription,\n  prevOperations,\n  prevStatus,\n  allTasks,\n}) => {\n  const [description, setDescription] = useState([]);\n  const [operations, setOperations] = useState(prevOperations);\n  const [status, setStatus] = useState(prevStatus);\n\n  const API_URL = \"http://localhost:3000\";\n\n  const addOperation = (e, id, { description }) => {\n    e.preventDefault();\n    let timeSpent = 0;\n    console.log(description, timeSpent);\n    let data = {\n      operations: [...operations, { description, timeSpent }],\n    };\n    console.log(data);\n\n    fetch(`${API_URL}/tasks/${id}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((tasks) => {\n        allTasks();\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n    console.log(operations);\n    console.log(prevOperations);\n  };\n\n  const addTimeSpent = (timeSpent, description) => {\n    let data = {\n      operations: [...operations, { description, timeSpent }],\n    };\n    fetch(`${API_URL}/tasks/${id}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((tasks) => {\n        console.log(tasks);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setDescription(() => {\n      return {\n        [name]: value,\n      };\n    });\n  };\n\n  const finish = (id) => {\n    setStatus(\"close\");\n\n    let data = {\n      status: \"close\",\n    };\n\n    fetch(`${API_URL}/tasks/${id}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((tasks) => {\n        console.log(tasks);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <section className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{title}</h5>\n        <h6 className=\"card-subtitle mb-2 text-muted\">{taskDescription}</h6>\n        {status === \"open\" && (\n          <>\n            <a href=\"#\" className=\"card-link\" onClick={() => finish(id)}>\n              Finish\n            </a>\n            <form className=\"mt-3\">\n              <div className=\"form-group\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"description\"\n                  placeholder=\"Operation description\"\n                  onChange={handleChange}\n                />\n              </div>\n              {status === \"open\" && (\n                <input\n                  type=\"submit\"\n                  value=\"Add operation to task\"\n                  className=\"btn btn-primary\"\n                  onClick={(e) => addOperation(e, id, description)}\n                />\n              )}\n            </form>\n          </>\n        )}\n      </div>\n      <ul className=\"list-group list-group-flush\">\n        {prevOperations !== undefined &&\n          prevOperations.map((el, i) => (\n            <Operations\n              key={i}\n              description={el.description}\n              addTimeSpent={addTimeSpent}\n              id={id}\n              lastTimeSpent={el.timeSpent}\n              status={status}\n            />\n          ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default Task;\n","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Task from \"./Task\";\n\nconst ToDo = () => {\n  const [tasks, setTasks] = useState({\n    id: \"\",\n    title: \"\",\n    description: \"\",\n    status: \"open\",\n    operations: [],\n  });\n  const [allTasks, setAllTasks] = useState([]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setTasks((prevState) => {\n      return {\n        ...prevState,\n        [name]: value,\n      };\n    });\n  };\n\n  const API_URL = \"http://localhost:3000\";\n\n  const submit = () => {\n    fetch(`${API_URL}/tasks`, {\n      method: \"POST\",\n      body: JSON.stringify(tasks),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((tasks) => {\n        console.log(tasks);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const getAllTasks = () => {\n    fetch(`${API_URL}/tasks`)\n      .then((response) => response.json())\n      .then((tasksFromDB) => {\n        setAllTasks(tasksFromDB);\n      })\n      .catch((e) => {\n        console.log(\"error\");\n      });\n  };\n\n  useEffect(() => {\n    getAllTasks();\n  }, []);\n\n  return (\n    <>\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4\">Add new task</h1>\n        <form onSubmit={submit}>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"title\"\n              placeholder=\"Title\"\n              value={tasks.title}\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"description\"\n              placeholder=\"Description\"\n              value={tasks.description}\n              onChange={handleChange}\n            />\n          </div>\n          <input type=\"submit\" className=\"btn btn-primary\" />\n        </form>\n      </div>\n      {allTasks.map((el) => (\n        <Task\n          id={el.id}\n          key={el.id}\n          title={el.title}\n          taskDescription={el.description}\n          prevOperations={el.operations}\n          prevStatus={el.status}\n          allTasks={getAllTasks}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default ToDo;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ToDo from \"./ToDo/js/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToDo />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}